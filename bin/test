#!/bin/bash

assert_equal() {
  local expected="${1}"
  local actual="${2}"
  if [ "$expected" != "$actual" ]; then
    echo "\nFAILED: expected ${expected}, found ${actual}"
    exit 1
  fi
}

assert_contains() {
  local expected="${1}"
  local actual="${2}"
  if echo "$actual" | grep -qi "$expected"; then
    :
  else
    echo "\nFAILED: expected ${expected} to match ${actual}"
    exit 1
  fi
}

set -e

heroku plugins:link .

app="heroku-exec-test-${RANDOM:-$TRAVIS_BUILD_ID}"
echo "Preparing test app ${app}..."

mkdir -p tmp
cd tmp
rm -rf ${app}
mkdir ${app}
cd ${app}

echo "Creating git repo..."
git init
web="ruby -rwebrick -e\"s=WEBrick::HTTPServer.new(:BindAddress => '0.0.0.0', :Port => \$PORT, :DocumentRoot => Dir.pwd); s.mount_proc('/'){|q,r| r.body='Hello'}; s.start\""
echo "web: ${web}" > Procfile

echo "Creating Heroku app..."
heroku create ${app}
heroku buildpacks:set https://github.com/ryandotsmith/null-buildpack
git add Procfile
git commit -m "first"

trap "{ echo ''; echo 'Cleaning up...'; heroku destroy ${app} --confirm ${app}; cd ../..; rm -rf tmp/${app}; }" EXIT

initOutput="$(heroku ps:exec "ls" 2>&1)"
assert_contains "Creating heroku-exec" "$initOutput"
assert_contains "Adding the Heroku Exec buildpack" "$initOutput"
assert_contains "Run the following commands to redeploy your app" "$initOutput"
assert_contains "git push heroku master" "$initOutput"
echo "=== test 1: success"

assert_contains "Heroku Exec is not running!" "$(heroku ps:exec --status 2>&1)"
echo "=== test 2: success"

output="$(heroku ps:exec ls 2>&1)"
assert_contains "Establishing credentials" "$output"
assert_contains "Could not connect to dyno!" "$output"
echo "=== test 3: success"

echo "Deploying..."
git push heroku master

echo -n "Waiting for dyno..."
state="starting"
while [ "up" != "$state" ]; do
  if [ "starting" != "$state" ]; then
    echo "WARNING: dyno state is \"${state}\""
  fi
  echo -n "."
  sleep 2
  state=$(heroku ps --json | jq .[0].state -r)
done
echo ""

assert_equal "Procfile" "$(heroku ps:exec ls)"

output="$(heroku ps:exec --status)"
assert_contains "web.1" "$output"
assert_contains "running" "$output"
assert_contains "up" "$output"

heroku ps:scale web=0
heroku run:detached "echo 'class A{public static void main(String[] a) throws Exception{while(true){Thread.sleep(1000);}}}' > A.java; javac A.java; java A"
dyno="$(heroku ps --json | jq .[0].name -r)"

# status="null"
# while [ "$status" != "up" ]; do
#   status="$(heroku ps --json | jq .[0].status -r)"
# end

sleep 5

heroku logs -d $dyno

assert_contains "run." "$dyno"
dump="$(heroku java:jstack --dyno $dyno)"

assert_contains "Full thread dump OpenJDK" "$dump"

dump="$(heroku java:jmap --dyno $dyno)"

assert_contains "#instances" "$dump"
assert_contains "java.lang.String" "$dump"

echo ""
echo "SUCCESS: All tests passed!"
